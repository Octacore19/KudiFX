apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.0"

    defaultConfig {
        applicationId "com.octacoresoftwares.kudifx"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def secureProps = new Properties()
        if (file("secure.properties").exists()) {
            file("secure.properties")?.withInputStream { secureProps.load(it) }
        }
        resValue "string", "access_key", (secureProps.getProperty("ACCESS_KEY") ?: "")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    // Retrofit & OKHttp Network libraries
    def retrofit_version = "2.9.0"
    def okhttp_version = "3.12.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"

    // Coroutines library
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    // Room database library
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    // Google MDC library
    implementation 'com.google.android.material:material:1.2.1'

    // Lifecycle dependencies
    def lifecycle_version = "2.2.0"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    // WorkManager library
    def work_version = "2.4.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"

    def dagger_version = "2.27"
    def assisted_version = "0.5.2"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
//    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    // Assisted Inject
    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:$assisted_version"
    kapt "com.squareup.inject:assisted-inject-processor-dagger2:$assisted_version"

    // Picasso image library
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Chart library
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
}